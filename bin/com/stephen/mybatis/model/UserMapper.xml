<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，
这样就能够保证namespace的值是唯一的 -->
<mapper namespace="com.stephen.mybatis.model.User">
    <!-- 配置一个结果映射对象 -->
    <resultMap type="User" id="userMap">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="age" column="age"/>
    </resultMap>

    <!-- 
        id:在命名空间中唯一的标识符,可以被用来引用这条语句。
        parameterType:将会传入这条语句的参数类的完全限定名或别名。
        parameterMap:这是引用外部 parameterMap 的已经被废弃的方法。使用内联参数映射和 parameterType 属性。
        resultType:属性指明查询返回的结果集类型,User类就是users表所对应的实体类
        useGeneratedKeys:主键自动增长的功能. 『注意Oracle主键不自增』.
        keyProperty:标记

        flushCache  将其设置为 true,不论语句什么时候被带哦用,都会导致缓存被清空。默认值:false。
        timeout 这个设置驱动程序等待数据库返回请求结果, 并抛出异常时间的最大等待值。默认不设置(驱动自行处理)。
        statementType   STA TEMENT,PREPARED 或 CALLABLE 的一种。这会让 MyBatis 使用选择使用 Statement,PreparedStatement 或 CallableStatement。默认值:PREPARED。
        useGeneratedKeys    ( 仅 对 insert 有 用 ) 这 会 告 诉 MyBatis 使 用 JDBC 的 getGeneratedKeys 方法来取出由数据(比如:像 MySQL 和 SQL Server 这样的数据库管理系统的自动递增字段)内部生成的主键。默认值:false。
        keyProperty (仅对 insert 有用) 标记一个属性, MyBatis 会通过 getGeneratedKeys 或者通过 insert 语句的 selectKey 子元素设置它的值。默认: 不设置。
        keyColumn   (仅对 insert 有用) 标记一个属性, MyBatis 会通过 getGeneratedKeys 或者通过 insert 语句的 selectKey 子元素设置它的值。默认: 不设置。
    -->
    <!-- 注意：
        1.#传出的参数会被加''进行转移处理，可以很大程度的上防止SQL注入，使用 $传得值是直接替换，不能防止sql注入
        2.CDATA全名:character data，在标记CDATA下，所有的标记、实体引用都被忽略，而被XML处理程序一视同仁地当做字符数据看待，CDATA的形式如下：  <![CDATA[文本内容]]> CDATA的文本内容中不能出现字符串“]]>”，另外，CDATA不能嵌套。
    -->
    <!-- 还记得我们在配置文件如下，这就是将我们model下的类取别名，parameterType="User"就是配置起的作用，
    -等价于parameterType="com.stephen.mybatis.model.User"
        <typeAliases><package name="com.stephen.mybatis.model"/></typeAliases>
     -->
    <insert id="add" parameterType="User" useGeneratedKeys="true" keyProperty="id">
        <![CDATA[
            INSERT INTO users(name, age) VALUES(#{name}, #{age})
        ]]>
    </insert>

    <select id="get" resultMap="userMap" parameterType="Integer">
        <![CDATA[
            SELECT * FROM users WHERE id = #{id}
        ]]>
    </select>

    <delete id="delete" parameterType="Integer">
        <![CDATA[
            DELETE FROM users WHERE id = #{id}
        ]]>
    </delete>

    <update id="update" parameterType="User">
        <![CDATA[
            UPDATE users SET name = #{name}, age = #{age} WHERE id = #{id}
        ]]>
    </update>

</mapper>